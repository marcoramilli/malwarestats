Array.prototype.average=function(){
  var sum=0;
  var j=0;
  for(var i=0;i<this.length;i++){
    if(isFinite(this[i])){
      sum=sum+parseFloat(this[i]);
      j++;
    }
  }
  if(j===0){
    return 0;
  }else{
    return sum/j;
  }
}

var client = new Keen({
  projectId: "55477cb496773d38759c17d7",
  readKey: "5ad2b80877f7746feb2fe69c3838b36ce3b10ce557ed2b798d7082c376c423eddcf1b72b220f5ca10c8108fb6fdc2180a0349232fe9ff3c5ae6e0599e758bd4e857017a41f67558f15da0cf5a488bf88b0b73d7f9f148b97eb3bd781ba3eafe36203dcb7a9972e54f78b3434053a9b40"
});

var query1 = new Keen.Query("count", {
  eventCollection: "malanalysis",
  groupBy: "Packer",
  maxAge: 300
    //timeframe: "this_1_months"
});

var chart1 = new Keen.Dataviz()
  .el(document.getElementById("chart-01"))
  .chartType("piechart")
  .height(300)
  .prepare(); // starts spinner


  //client.run(query1, function(err, res) {
    //if (err) {
      //console.log('ERROR: ', err);
    //} else {
      //var data = res.result;
      //var i = 0;
      //while (i < data.length) {
        //if (data[i]["Packer"]) {
          //if (data[i]["Packer"][0] === undefined){
            //data[i]["Packer"] = "Custom Made"
          //} else {
            //data[i]["Packer"] = data[i]["Packer"][0];
          //}
        //}
        //i++;
      //}

     //chart1
    //.parseRawData({ result: data.slice(1,-1) })
    ////.title("Custom chart title")
    //.render();
    //}
  //});

var query2 = new Keen.Query("count", {
      eventCollection: "malanalysis",
      groupBy: "Anti VM",
      maxAge: 300  
    ////timeframe: "this_1_months"
});

var chart2 = new Keen.Dataviz()
    .el(document.getElementById("chart-0"))
    .chartType("barchart")
    .height(300)
    .colors(["#52C0DE"])
    .prepare();

    client.run(query2, function(err, res){buildData(err, res, [chart2], "Anti VM", 0); });
    client.run(query1, function(err, res){buildData(err, res, [chart1], "Packer", 0); });

var query3 = new Keen.Query("count", {

      eventCollection: "malanalysis",
      groupBy: "Anti Debug",
      maxAge: 300
      ////timeframe: "this_1_months"
});

var query3_a = new Keen.Query("count", {

      eventCollection: "malanalysis",
      groupBy: "Suspicious API",
      maxAge: 300
      ////timeframe: "this_1_months"
});

var chart3_a = new Keen.Dataviz()
    .el(document.getElementById("chart-03_a"))
    .chartType("columnchart")
    .colors(["#52C0DE"])
    .height(300)
    .prepare();

var chart3 = new Keen.Dataviz()
    .el(document.getElementById("chart-02"))
    .chartType("columnchart")
    .colors(["#52C0DE"])
    .height(300)
    .prepare();

var chart3_b = new Keen.Dataviz()
    .el(document.getElementById("chart-03_b"))
    .chartType("table")
    .height(300)
    .width(700)
    .prepare();


var chart4 = new Keen.Dataviz()
    .el(document.getElementById("chart-03"))
    .chartType("table")
    .height(300)
    .width(700)
    .prepare();

    client.run(query3,function(err, res){buildData(err, res, [chart3, chart4], "Anti Debug", 0); }); 
    client.run(query3,function(err, res){buildData(err, res, chart4, "Anti Debug", 0);  }); 
    setInterval(client.run(query3_a,function(err, res){buildData(err, res, [chart3_a, chart3_b], "Suspicious API", 0);  }), 5000); 

var query5 = new Keen.Query("count",{
    eventCollection: "malanalysis",
    maxAge: 300
    });

var query6 = new Keen.Query("count",{
    eventCollection: "malanalysis",
    maxAge: 300,
    filters:[{
      "property_name": "Xor",
      "operator": "eq",
      "property_value": true
    }]
    });

var query7 = new Keen.Query("count",{
    eventCollection: "malanalysis",
    maxAge: 300,
    filters:[{
        "property_name": "Short Info.DLL",
        "operator": "eq",
        "property_value": true 
    }]
    });

var query8 = new Keen.Query("extraction",{
    eventCollection: "malanalysis",
    maxAge: 300,
    filters:[{
        "property_name": "Url",
        "operator": "exists",
        "property_value": true 
    }]
    });
        
var chart5 = new Keen.Dataviz()
    .el(document.getElementById("sum1"))
    .chartType("metric")
    .title("Total Analysed samples")
    .prepare()

var chart6 = new Keen.Dataviz()
    .el(document.getElementById("sum2"))
    .chartType("metric")
    .title("XOR detected")
    .colors(["#52C0DE"])
    .prepare()

var chart7 = new Keen.Dataviz()
    .el(document.getElementById("sum3"))
    .chartType("metric")
    .title("Malicious DLL")
    .colors(["#52C0DE"])
    .prepare()

var chart8 = new Keen.Dataviz()
    .el(document.getElementById("sum4"))
    .chartType("metric")
    .title("Identified URL")
    .colors(["#52C0DE"])
    .prepare()

var chart9 = new Keen.Dataviz()
    .el(document.getElementById("sum5"))
    .chartType("metric")
    .title("AVG File Size")
    .colors(["#52C0DE"])
    .prepare()

    client.run(query5, function(err, res){
      if (err) {console.log('ERROR: ' + err);}
      else{ 
        chart5
      .parseRawData({result: res.result})
      .render();
      }
    });

    client.run(query6, function(err, res){
      if (err) {console.log('ERROR: ' + err);}
      else{ 
      chart6
      .parseRawData({result: res.result})
      .render();
      }
    });

    client.run(query7, function(err, res){
      if (err) {console.log('ERROR: ' + err);}
      else{ 
      chart7
      .parseRawData({result: res.result})
      .render();
      }
    });

client.run(query8, function(err, res){
  if (err) {console.log('ERROR: ' + err);}
  else{ 
    var total = 0;
    var sizes = [];
    var data =  res.result;

    data.forEach(function(item, index, array){
      if (undefined != item.Url && null != item.Url){
        total = total + item.Url.length; 
        sizes.push(parseInt(item["Short Info"]["File Size"]));
      }
      if (index >= array.length - 1){

      chart8
      .parseRawData({result: total})
      .render();

      chart9
      .parseRawData({result: sizes.average() })
      .render();

      }
    });
  }
});

    function buildData(err, res, chart_array, filter, topx){
      if (err){
        console.log('ERROR: ', err);
      } else {
        var data    = res.result;
        var data_out = new Array();
        var i_1 = 0;
        var i_2 = 0;

        if (data){
          while (i_1 < data.length){
            if (null != data[i_1] && undefined != data[i_1] && undefined != data[i_1][filter] && null != data[i_1][filter]){
              if (data[i_1][filter][0] === undefined ){
                //data_out.push({filter: "Not Detected", "result": data[i_1].result});
              } else {
                for (var j=0; j<data[i_1][filter].length; j++){
                  if (null != data[i_1][filter][j] && undefined != data[i_1][filter][j]){
                    var s = 0;
                    for (var index=0; index < data_out.length; index++){
                      if (undefined === data[index])
                        break;;
                      var current = data[index];
                      if (current[filter] == data[i_1][filter][j]){
                        current.result = current.result + data[i_1].result;
                        s = 1;
                        break;;
                      } 
                    }//looking for dups
                    if (!s){
                        data_out.push({filter: data[i_1][filter][j], "result": data[i_1].result });
                        s = 0;
                    }
                    }//if data exists
                  } 
                }
              }
          i_1++;
        }
      }
        if (undefined === chart_array || 0 == chart_array.length){
          return console.log("Error you must passing to the funztion at least one chart");
        } else{
          for (var c=0; c<chart_array.length; c++){
            chart = chart_array[c];
            if (topx == 0){
              chart.parseRawData({result: data_out});
            }
            else{
              data_out.sort(function(a,b){
                if (a.result > b.result)
                return -1;
              if (a.result < b.result)
                return 1;
              return 0;
              });
              var data_out_sorted_sliced = data_out.slice(1, topx);
              chart.parseRawData({resutl: data_out_sorted_sliced});

            }
            chart.render();
          }
        }
      }
    };

//var client = new Keen({
  //projectId: "5368fa5436bf5a5623000000"m,
  //readKey: "3f324dcb5636316d6865ab0ebbbbc725224c7f8f3e8899c7733439965d6d4a2c7f13bf7765458790bd50ec76b4361687f51cf626314585dc246bb51aeb455c0a1dd6ce77a993d9c953c5fc554d1d3530ca5d17bdc6d1333ef3d8146a990c79435bb2c7d936f259a22647a75407921056"
//});

//Keen.ready(function(){


  //// ----------------------------------------
  //// Pageviews Area Chart
  //// ----------------------------------------
  //var pageviews_timeline = new Keen.Query("count", {
    //eventCollection: "pageviews",
    //interval: "hourly",
    //groupBy: "user.device_info.browser.family",
    //timeframe: {
      //start: "2014-05-04T00:00:00.000Z",
      //end: "2014-05-05T00:00:00.000Z"
    //}
  //});
  //client.draw(pageviews_timeline, document.getElementById("chart-01"), {
    //chartType: "areachart",
    //title: false,
    //height: 250,
    //width: "auto",
    //chartOptions: {
      //chartArea: {
        //height: "85%",
        //left: "5%",
        //top: "5%",
        //width: "80%"
      //},
      //isStacked: true
    //}
  //});


  //// ----------------------------------------
  //// Pageviews Pie Chart
  //// ----------------------------------------
  //var pageviews_static = new Keen.Query("count", {
    //eventCollection: "pageviews",
    //groupBy: "user.device_info.browser.family",
    //timeframe: {
      //start: "2014-05-01T00:00:00.000Z",
      //end: "2014-05-05T00:00:00.000Z"
    //}
  //});
  //client.draw(pageviews_static, document.getElementById("chart-02"), {
    //charttype: "piechart",
    //title: false,
    //height: 250,
    //width: "auto",
    //chartoptions: {
      //chartarea: {
        //height: "85%",
        //left: "5%",
        //top: "5%",
        //width: "100%"
      //},
      //piehole: .4
    //}
  //});


  //// ----------------------------------------
  //// Impressions timeline
  //// ----------------------------------------
  //var impressions_timeline = new Keen.Query("count", {
    //eventCollection: "impressions",
    //groupBy: "ad.advertiser",
    //interval: "hourly",
    //timeframe: {
      //start: "2014-05-04T00:00:00.000Z",
      //end: "2014-05-05T00:00:00.000Z"
    //}
  //});
  //client.draw(impressions_timeline, document.getElementById("chart-03"), {
    //chartType: "columnchart",
    //title: false,
    //height: 250,
    //width: "auto",
    //chartOptions: {
      //chartArea: {
        //height: "75%",
        //left: "10%",
        //top: "5%",
        //width: "60%"
      //},
      //bar: {
        //groupWidth: "85%"
      //},
      //isStacked: true
    //}
  //});


  //// ----------------------------------------
  //// Impressions timeline (device)
  //// ----------------------------------------
  //var impressions_timeline_by_device = new Keen.Query("count", {
    //eventCollection: "impressions",
    //groupBy: "user.device_info.device.family",
    //interval: "hourly",
    //timeframe: {
      //start: "2014-05-04T00:00:00.000Z",
      //end: "2014-05-05T00:00:00.000Z"
    //}
  //});
  //client.draw(impressions_timeline_by_device, document.getElementById("chart-04"), {
    //chartType: "columnchart",
    //title: false,
    //height: 250,
    //width: "auto",
    //chartOptions: {
      //chartArea: {
        //height: "75%",
        //left: "10%",
        //top: "5%",
        //width: "60%"
      //},
      //bar: {
        //groupWidth: "85%"
      //},
      //isStacked: true
    //}
  //});


  //// ----------------------------------------
  //// Impressions timeline (country)
  //// ----------------------------------------
  //var impressions_timeline_by_country = new Keen.Query("count", {
    //eventCollection: "impressions",
    //groupBy: "user.geo_info.country",
    //interval: "hourly",
    //timeframe: {
      //start: "2014-05-04T00:00:00.000Z",
      //end: "2014-05-05T00:00:00.000Z"
    //}
  //});
  //client.draw(impressions_timeline_by_country, document.getElementById("chart-05"), {
    //chartType: "columnchart",
    //title: false,
    //height: 250,
    //width: "auto",
    //chartOptions: {
      //chartArea: {
        //height: "75%",
        //left: "10%",
        //top: "5%",
        //width: "60%"
      //},
      //bar: {
        //groupWidth: "85%"
      //},
      //isStacked: true
    //}
  //});


//});
